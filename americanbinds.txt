	static Key keys[] = {
	    STACKKEYS(MODKEY, focus) STACKKEYS(MODKEY | ShiftMask, push)
	  /* modifier             key                 function            argument */
	    { MODKEY,              XK_F1,              spawn,              SHCMD("groff -mom /usr/local/share/dwm/keybinds.mom -Tpdf | zathura -") },
	    { MODKEY,              XK_F2,              spawn,              {.v = (const char *[]){TERMINAL, "-e", "deluge-console"}} },
	    { MODKEY,              XK_F3,              spawn,              SHCMD(TERMINAL "-e pulsemixer; kill -44 $(pidof dwmblocks)") },
	  /*{ MODKEY,              XK_F4,              spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY,              XK_F5,              spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY,              XK_F6,              spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY,              XK_F7,              spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY,              XK_F8,              spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY,              XK_F9,              spawn,              {.v = (const char *[]){"dmenumount", NULL}} },
	    { MODKEY,              XK_F10,             spawn,              {.v = (const char *[]){"dmenuumount", NULL}} },
	  /*{ MODKEY,              XK_F11,             spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY,              XK_F12,             spawn,              {.v = (const char *[]){"remaps", NULL}} },
	    { MODKEY,              XK_grave,     spawn,              {.v = (const char *[]){"dmenuunicode", NULL}} },
	  /*{ MODKEY | ShiftMask,  XK_grave,     spawn,              {.v = (const char *[]){NULL}} },*/
	    TAGKEYS(               XK_1,                                   0)
	    TAGKEYS(               XK_2,                                   1)
	    TAGKEYS(               XK_3,                                   2)
	    TAGKEYS(               XK_4,                                   3)
	    TAGKEYS(               XK_5,                                   4)
	    TAGKEYS(               XK_6,                                   5)
	    TAGKEYS(               XK_7,                                   6)
	    TAGKEYS(               XK_8,                                   7)
	    TAGKEYS(               XK_9,                                   8)
	    { MODKEY,              XK_0,               view,               {.ui = ~0} },
	    { MODKEY | ShiftMask,  XK_0,               tag,                {.ui = ~0} },
	    { MODKEY,              XK_minus,          spawn,              SHCMD("pamixer --allow-boost -d 5; kill -44 $(pidof dwmblocks)") },
	    { MODKEY | ShiftMask,  XK_minus,          spawn,              SHCMD("pamixer --allow-boost -d 15; kill -44 $(pidof dwmblocks)") },
	    { MODKEY,              XK_equal,           spawn,              SHCMD("pamixer --allow-boost -i 5; kill -44 $(pidof dwmblocks)") },
	    { MODKEY | ShiftMask,  XK_equal,           spawn,              SHCMD("pamixer --allow-boost -i 15; kill -44 $(pidof dwmblocks)") },
	    { MODKEY,              XK_BackSpace,       spawn,              {.v = (const char *[]){"sysact", NULL}} },
	    { MODKEY | ShiftMask,  XK_BackSpace,       spawn,              {.v = (const char *[]){"sysact", NULL}} },
	    { MODKEY,              XK_Tab,             view,               {0} },
	  /*{ MODKEY|ShiftMask,    XK_Tab,             spawn,              {.v = (const char *[]){NULL}}},*/
	    { MODKEY,              XK_q,               killclient,         {0} },
	    { MODKEY | ShiftMask,  XK_q,               spawn,              {.v = (const char *[]){"sysact", NULL}} },
	    { MODKEY,              XK_w,               spawn,              {.v = (const char *[]){BROWSER, NULL}} },
	    { MODKEY | ShiftMask,  XK_w,               spawn,              {.v = (const char *[]){TERMINAL, "-e", "sudo", "nmtui", NULL}} },
	    { MODKEY,              XK_e,               togglescratch,      {.v = splf} },
	  /*{ MODKEY | ShiftMask,  XK_e,               spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY,              XK_r,               togglescratch,      {.v = sphtop} },
	    { MODKEY | ShiftMask,  XK_r,               spawn,              {.v = (const char *[]){TERMINAL, "-e", "htop", NULL}} },
	    { MODKEY,              XK_t,               setlayout,          {.v = &layouts[0]} }, /* tile */
	    { MODKEY | ShiftMask,  XK_t,               setlayout,          {.v = &layouts[1]} }, /* bstack */
	    { MODKEY,              XK_y,               setlayout,          {.v = &layouts[2]} }, /* spiral */
	    { MODKEY | ShiftMask,  XK_y,               setlayout,          {.v = &layouts[3]} }, /* dwindle */
	    { MODKEY,              XK_u,               setlayout,          {.v = &layouts[4]} }, /* deck */
	    { MODKEY | ShiftMask,  XK_u,               setlayout,          {.v = &layouts[5]} }, /* monocle */
	    { MODKEY,              XK_i,               setlayout,          {.v = &layouts[6]} }, /* centeredmaster */
	    { MODKEY | ShiftMask,  XK_i,               setlayout,          {.v = &layouts[7]} }, /* centeredfloatingmaster */
	    { MODKEY,              XK_o,               incnmaster,         {.i = +1} },
	    { MODKEY | ShiftMask,  XK_o,               incnmaster,         {.i = -1} },
	    { MODKEY,              XK_p,               spawn,              {.v = (const char *[]){"mpc", "toggle", NULL}} },
	    { MODKEY | ShiftMask,  XK_p,               spawn,              SHCMD("mpc pause ; pauseallmpv") },
	    { MODKEY,              XK_bracketleft,      spawn,              {.v = (const char *[]){"mpc", "seek", "-10", NULL}} },
	    { MODKEY | ShiftMask,  XK_bracketleft,      spawn,              {.v = (const char *[]){"mpc", "seek", "-60", NULL}} },
	    { MODKEY,              XK_bracketright,            spawn,              {.v = (const char *[]){"mpc", "seek", "+10", NULL}} },
	    { MODKEY | ShiftMask,  XK_bracketright,            spawn,              {.v = (const char *[]){"mpc", "seek", "+60", NULL}} },
	    { MODKEY,              XK_a,               togglegaps,         {0} },
	    { MODKEY | ShiftMask,  XK_a,               defaultgaps,        {0} },
	  /*{ MODKEY,              XK_s,               spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_s,               spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY,              XK_d,               spawn,              {.v = (const char *[]){"dmenu_run", NULL}} },
	    { MODKEY | ShiftMask,  XK_d,               spawn,              {.v = (const char *[]){"passmenu", NULL}} },
	    { MODKEY,              XK_f,               togglefullscr,      {0} },
	    { MODKEY | ShiftMask,  XK_f,               setlayout,          {.v = &layouts[8]} }, /* floating */
	  /*{ MODKEY,              XK_g,               spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_g,               spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY,              XK_h,               setmfact,           {.f = -0.05} },
	  /*{ MODKEY | ShiftMask,  XK_h,               spawn,              {.v = (const char *[]){NULL}} },*/
	    /* J and K are automatically bound above in STACKEYS */
	    { MODKEY,              XK_l,               setmfact,           {.f = +0.05} },
	  /*{ MODKEY | ShiftMask,  XK_l,               spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY,              XK_semicolon,      spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_semicolon,      spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY,              XK_apostrophe,      spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_apostrophe,      spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY,              XK_backslash,      togglescratch,      {.v = spqalc} },
	  /*{ MODKEY | ShiftMask,  XK_backslash,      spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY,              XK_Return,          spawn,              {.v = (const char *[]){TERMINAL, "-d", "~", NULL}} },
	    { MODKEY | ShiftMask,  XK_Return,          spawnsshaware,      {.v = (const char *[]){TERMINAL, "-d", "~", NULL}} },
	  /*{ MODKEY,              XK_z,               spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_z,               spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY,              XK_x,               spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_x,               spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY,              XK_c,               spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_c,               spawn,              {.v = (const char *[]){NULL}} },*/
	    /* V is automatically bound above in STACKKEYS */
	    { MODKEY,              XK_b,               togglebar,          {0} },
	  /*{ MODKEY | ShiftMask,  XK_b,               spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY,              XK_n,               spawn,              {.v = (const char *[]){TERMINAL, "-e", "nvim", "-c", "VimwikiIndex", NULL}} },
	  /*{ MODKEY | ShiftMask,  XK_n,               spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY,              XK_m,               spawn,              {.v = (const char *[]){TERMINAL, "-e", "ncmpcpp", NULL}} },
	    { MODKEY | ShiftMask,  XK_m,               spawn,              SHCMD("pamixer -t; kill -44 $(pidof dwmblocks)") },
	    { MODKEY,              XK_comma,           spawn,              {.v = (const char *[]){"mpc", "prev", NULL}} },
	    { MODKEY | ShiftMask,  XK_comma,           spawn,              {.v = (const char *[]){"mpc", "seek", "0%", NULL}} },
	    { MODKEY,              XK_period,          spawn,              {.v = (const char *[]){"mpc", "next", NULL}} },
	    { MODKEY | ShiftMask,  XK_period,          spawn,              {.v = (const char *[]){"mpc", "repeat", NULL}} },
	  /*{ MODKEY,              XK_slash,           spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_slash,           spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY,              XK_space,           zoom,               {0} },
	    { MODKEY | ShiftMask,  XK_space,           togglefloating,     {0} },
	    { 0,                   XK_Print,           spawn,              SHCMD("maim ~/Photos/Screenshots/pic-full-$(date '+%y%m%d-%H%M-%S').png") },
	    { ShiftMask,           XK_Print,           spawn,              {.v = (const char *[]){"maimpick", NULL}} },
	    { MODKEY,              XK_Print,           spawn,              {.v = (const char *[]){"dmenurecord", NULL}} },
	    { MODKEY | ShiftMask,  XK_Print,           spawn,              {.v = (const char *[]){"dmenurecord", "kill", NULL}} },
	  /*{ MODKEY,              XK_Scroll_Lock,     spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_Scroll_Lock,     spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY,              XK_Pause,           spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_Pause,           spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY,              XK_Insert,          spawn,              SHCMD("xdotool type $(grep -v '^#' ~/.local/share/snippets | dmenu -i -l " "50 | cut -d' ' -f1)") },
	  /*{ MODKEY | ShiftMask,  XK_Insert,          spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY,              XK_Home,            spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_Home,            spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY,              XK_Delete,          spawn,              {.v = (const char *[]){"dmenurecord", "kill", NULL}} },
	  /*{ MODKEY | ShiftMask,  XK_Delete,          spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY,              XK_End,             spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY | ShiftMask,  XK_End,             quit,               {0} },
	  /*{ MODKEY,              XK_Page_Up,         spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_Page_Up,         spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY,              XK_Page_Down,       spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_Page_Down,       spawn,              {.v = (const char *[]){NULL}} },*/
	    { MODKEY,              XK_Left,            focusmon,           {.i = -1} },
	    { MODKEY | ShiftMask,  XK_Left,            tagmon,             {.i = -1} },
	    { MODKEY,              XK_Right,           focusmon,           {.i = +1} },
	    { MODKEY | ShiftMask,  XK_Right,           tagmon,             {.i = +1} },
	  /*{ MODKEY,              XK_Up,              spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_Up,              spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY,              XK_Down,            spawn,              {.v = (const char *[]){NULL}} },*/
	  /*{ MODKEY | ShiftMask,  XK_Down,            spawn,              {.v = (const char *[]){NULL}} },*/
	
	    { 0, XF86XK_AudioMute,                     spawn,              SHCMD("pamixer -t; kill -44 $(pidof dwmblocks)") },
	    { 0, XF86XK_AudioRaiseVolume,              spawn,              SHCMD("pamixer --allow-boost -i 3; kill -44 $(pidof dwmblocks)") },
	    { 0, XF86XK_AudioLowerVolume,              spawn,              SHCMD("pamixer --allow-boost -d 3; kill -44 $(pidof dwmblocks)") },
	    { 0, XF86XK_AudioPrev,                     spawn,              {.v = (const char *[]){"mpc", "prev", NULL}} },
	    { 0, XF86XK_AudioNext,                     spawn,              {.v = (const char *[]){"mpc", "next", NULL}} },
	    { 0, XF86XK_AudioPause,                    spawn,              {.v = (const char *[]){"mpc", "pause", NULL}} },
	    { 0, XF86XK_AudioPlay,                     spawn,              {.v = (const char *[]){"mpc", "play", NULL}} },
	    { 0, XF86XK_AudioStop,                     spawn,              {.v = (const char *[]){"mpc", "stop", NULL}} },
	    { 0, XF86XK_AudioRewind,                   spawn,              {.v = (const char *[]){"mpc", "seek", "-10", NULL}} },
	    { 0, XF86XK_AudioForward,                  spawn,              {.v = (const char *[]){"mpc", "seek", "+10", NULL}} },
	    { 0, XF86XK_AudioMedia,                    spawn,              {.v = (const char *[]){TERMINAL, "-e", "ncmpcpp", NULL}} },
	    { 0, XF86XK_AudioMicMute,                  spawn,              SHCMD("pactl set-source-mute @DEFAULT_SOURCE@ toggle") },
	    { 0, XF86XK_PowerOff,                      spawn,              {.v = (const char *[]){"sysact", NULL}} },
	    { 0, XF86XK_Calculator,                    spawn,              {.v = (const char *[]){TERMINAL, "-e", "bc", "-l", NULL}} },
	    { 0, XF86XK_Sleep,                         spawn,              {.v = (const char *[]){"sudo", "-A", "zzz", NULL}} },
	    { 0, XF86XK_WWW,                           spawn,              {.v = (const char *[]){BROWSER, NULL}} },
	    { 0, XF86XK_DOS,                           spawn,              {.v = (const char *[]){TERMINAL, NULL}} },
	    { 0, XF86XK_ScreenSaver,                   spawn,              SHCMD("xset s activate & mpc pause & pauseallmpv") },
	    { 0, XF86XK_TaskPane,                      spawn,              {.v = (const char *[]){TERMINAL, "-e", "htop", NULL}} },
	    { 0, XF86XK_Mail,                          spawn,              SHCMD("kitty -e neomutt; pkill -RTMIN+12 dwmblocks") },
	    { 0, XF86XK_MyComputer,                    spawn,              {.v = (const char *[]){TERMINAL, "-e", "lfub", "/", NULL}} },
	  /*{ 0, XF86XK_Battery,                       spawn,              {.v = (const char *[]){NULL}} }, */
	    { 0, XF86XK_Launch1,                       spawn,              {.v = (const char *[]){"xset", "dpms", "force", "off", NULL}} },
	    { 0, XF86XK_TouchpadToggle,                spawn,              SHCMD("(synclient | grep 'TouchpadOff.*1' && synclient TouchpadOff=0) || " "synclient TouchpadOff=1") },
	    { 0, XF86XK_TouchpadOff,                   spawn,              {.v = (const char *[]){"synclient", "TouchpadOff=1", NULL}} },
	    { 0, XF86XK_TouchpadOn,                    spawn,              {.v = (const char *[]){"synclient", "TouchpadOff=0", NULL}} },
	    { 0, XF86XK_MonBrightnessUp,               spawn,              {.v = (const char *[]){"xbacklight", "-inc", "15", NULL}} },
	    { 0, XF86XK_MonBrightnessDown,             spawn,              {.v = (const char *[]){"xbacklight", "-dec", "15", NULL}} },
	};
